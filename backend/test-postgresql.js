const { sequelize } = require('./src/config/database');const models = require('./src/models/indexPG');async function testPostgreSQLSetup() {  console.log('üß™ Testing PostgreSQL Setup...\n');  try {    console.log('1Ô∏è‚É£ Testing database connection...');    await sequelize.authenticate();    console.log('‚úÖ Database connection successful\n');    console.log('2Ô∏è‚É£ Testing model synchronization...');    await sequelize.sync({ force: false });    console.log('‚úÖ Models synchronized successfully\n');    console.log('3Ô∏è‚É£ Testing user creation...');    const { User, UserProfile } = models;    await User.destroy({ where: { email: 'test@postgresql.com' } });    const testUser = await User.create({      name: 'PostgreSQL Test User',      email: 'test@postgresql.com',      password: 'testpassword123',      interests: ['Testing', 'PostgreSQL'],      skills: ['Database Management']    });    console.log('‚úÖ User created:', testUser.name);    console.log('4Ô∏è‚É£ Testing user profile creation...');    const testProfile = await UserProfile.create({      userId: testUser.id,      bio: 'Test user for PostgreSQL migration',      education: 'student',      location: {        city: 'Test City',        country: 'Test Country'      }    });    console.log('‚úÖ User profile created\n');    console.log('5Ô∏è‚É£ Testing queries with associations...');    const userWithProfile = await User.findByPk(testUser.id, {      include: ['profile']    });    console.log('‚úÖ User with profile loaded:', {      name: userWithProfile.name,      profileBio: userWithProfile.profile?.bio    });    console.log('6Ô∏è‚É£ Testing authentication methods...');    const isPasswordCorrect = await testUser.matchPassword('testpassword123');    const token = testUser.generateAuthToken();    console.log('‚úÖ Password validation:', isPasswordCorrect);    console.log('‚úÖ JWT token generated:', token.substring(0, 20) + '...\n');    console.log('7Ô∏è‚É£ Testing progress tracking...');    const { UserProgress } = models;    const testProgress = await UserProgress.create({      userId: testUser.id,      skillArea: 'JavaScript',      currentLevel: 'beginner',      progressPercentage: 25,      totalTimeSpent: 120    });    console.log('‚úÖ Progress record created:', {      skillArea: testProgress.skillArea,      level: testProgress.currentLevel,      percentage: testProgress.progressPercentage    });    console.log('8Ô∏è‚É£ Testing JSON/JSONB operations...');    await testProgress.update({      completedModules: [        {          moduleId: 'mod_001',          title: 'Variables and Data Types',          completedAt: new Date(),          timeSpent: 30,          score: 85        }      ]    });    console.log('‚úÖ JSONB data updated successfully\n');    console.log('üßπ Cleaning up test data...');    await UserProgress.destroy({ where: { userId: testUser.id } });    await UserProfile.destroy({ where: { userId: testUser.id } });    await User.destroy({ where: { id: testUser.id } });    console.log('‚úÖ Test data cleaned up\n');    console.log('üéâ All tests passed! PostgreSQL setup is working correctly.');    console.log('\nüìã Test Summary:');    console.log('   ‚úÖ Database connection');    console.log('   ‚úÖ Model synchronization');    console.log('   ‚úÖ User CRUD operations');    console.log('   ‚úÖ Association queries');    console.log('   ‚úÖ Authentication methods');    console.log('   ‚úÖ Progress tracking');    console.log('   ‚úÖ JSON/JSONB operations');  } catch (error) {    console.error('‚ùå Test failed:', error.message);    console.error('Full error:', error);  } finally {    await sequelize.close();    console.log('\nüîå Database connection closed');    process.exit(0);  }}if (require.main === module) {  testPostgreSQLSetup();}module.exports = { testPostgreSQLSetup };